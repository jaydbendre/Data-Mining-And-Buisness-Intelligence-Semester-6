#Function to add the actual time at which the Flight Landed or Departed
def update_actual_time(value):
    # print(value["Status"])
    if type(value["Status"]) == type("String"):
        status = value["Status"].split(" ")
        if len(status) == 3 and status[1] != "to":
            time = value["date"] + " " + status[1] + " " + status[2]
            scheduled_time = pd.to_datetime(
                value["Time"], format="%Y-%m-%d %H:%M:%S")
            actual_time = pd.to_datetime(time, format="%Y-%m-%d %I:%M %p")

            threshold_date = pd.to_datetime(
                value["date"]+" "+"00:00:00", format="%Y-%m-%d %H:%M:%S")

            lb_threshold_date = pd.to_datetime(
                value["date"]+" "+"20:30:00", format="%Y-%m-%d %H:%M:%S")

            ub_threshold_date = pd.to_datetime(
                value["date"]+" "+"03:00:00", format="%Y-%m-%d %H:%M:%S")

            if actual_time <= ub_threshold_date and scheduled_time >= lb_threshold_date:
                actual_time = actual_time + dt.timedelta(days=1)
            elif scheduled_time <= ub_threshold_date and actual_time >= lb_threshold_date:
                actual_time = actual_time - dt.timedelta(days=1)
            timedelta = pd.Timedelta(actual_time - scheduled_time).seconds/3600
            return actual_time
        else:
            return np.nan
    else:
        return np.nan
df["Actual_Time"] = df[["Time", "Status", "date"]].apply(update_actual_time, 1) #Calling the above function and updating the Dataframe
df #Printing the Updated Dataframe




#Converting the Nominal Data To Numeric
map_dict = {
    "Landed": 0,
    "Departed": 1,
    "Unknown": 2,
    "Diverted": 3,
    "Canceled": 4,
    "Estimated": -1,
}
df["Status"] = df.Status.replace(map_dict) #replacing the Status with numeric data
df["Status"] = df["Status"].astype(int) #Converting it to int datatype
df #Printing the Updated Dataframe